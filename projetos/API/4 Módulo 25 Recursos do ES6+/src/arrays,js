const redesSociais = ['Facebook', 'Instagram', 'Twitter'];

// metodo normal pra passar entre os indeces:

for (let i = 0; i < redesSociais.length; i++) {
    console.log(`Eu tenho perfil no: ${redesSociais[i]}`);
}

// metodos apos o ES6+

// forEach

redesSociais.forEach(function(NomeItemNoIndiceDaVariante, indice) { // indice e opcional
    console.log(`#${indice} Eu tenho perfil no: ${NomeItemNoIndiceDaVariante}`);
})

// map

const alunos = ['Gustavo', 'Julia', 'Paula', 'Wagner'];
const alunos2 = alunos.map(function(itemAtualNoArray) {
    itemAtualNoArray = {
        nome: itemAtualNoArray,
        curso: 'Frontend'
    }
    return itemAtualNoArray; // tambem da pra fazer return direto no objeto
}) 

console.log(alunos2);

    // se quiser achar um item no array e retornar ele, podemos fazer:

const paula = alunos2.find(function(item) {
    return item.nome == 'Paula' // o find retorna o item em si - se ele nao encontra o item, retorna undefined
})

console.log(paula);

    // pra encontrar o indice do item do array:

const indicePaula = alunos2.findIndex(function(item) {
    return item.nome == 'Paula' // o find retorna o indice do item - se ele nao encontra o item, retorna -1
})

console.log(indicePaula);

// pra verificar um valor no array, comparando se todos atendem ao requisito:

alunos2.push({
    nome: 'Lucio',
    curso: 'Backend'
})

const todosAlunosFrontEnd = alunos2.every(function(item) {
    return item.curso === 'Frontend';
})

console.log(todosAlunosFrontEnd);

// const todosAlunosMaiorIdade = alunos2.every(function(item) {
//     return item.idade >= 18;
// })

// pra comparar se apenas um item atende ao requisito:

const temAlgumAlunoBackend = alunos2.some(function(item) {
    return item.curso === 'Backend' && item.curso === 'Frontend';
})

console.log(temAlgumAlunoBackend);

// da tambem pra filtrar items de array:

function filtraAlunosBackend(aluno) { //aluno Ã© o argumento desse tipo de funcao (nao a variavel, mas apenas a que ta iterando)
    return aluno.curso === 'Backend';
} // tambem da pra criar uma funcao, e entao nao ter que escrever no lugar da funcao anonima. se isso for reutilizavel e mais util fazer assim

const alunosBackend = alunos2.filter(filtraAlunosBackend);

console.log(alunosBackend);

// pra reduzir o conteudo de um array em um unico valor:

const nums = [10, 20, 30, 10];
const soma = nums.reduce(function(acumulador, itemAtual) {
    acumulador += itemAtual;
    return acumulador;
}, 0) //recebe dois parametros, o acumulador e o valor inicial

console.log(soma);

// pra fazer o reduce com strings:

const nomeAlunos = alunos2.reduce(function(acumulador, itemAtual) {
    acumulador += `${itemAtual.nome} `;
    return acumulador;
}, '')

console.log(nomeAlunos);

// se fosse do jeito tradicional:

let somaComFor = 0;
for (let i = 0; i < nums.length; i++) {
somaComFor += nums[i];
}
console.log(somaComFor);

// outro exemplo de map

const numeros = [1, 2, 3, 4, 5];
const dobroNumeros = numeros.map(function(numeroAtual) {
    numeroAtual = numeroAtual * 2;
    return numeroAtual;
})

console.log(dobroNumeros);